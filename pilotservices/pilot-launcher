#!/usr/bin/python

import os
import signal
import urllib
from optparse import OptionParser

from glideinwms_pilot.errors import PilotError
from glideinwms_pilot.errors import TimeoutError
from glideinwms_pilot.errors import ConfigError

from glideinwms_pilot.vm_utils import chown
from glideinwms_pilot.vm_utils import chmod
from glideinwms_pilot.vm_utils import cd
from glideinwms_pilot.vm_utils import launch_pilot
from glideinwms_pilot.vm_utils import drop_privs
from glideinwms_pilot.vm_utils import shutdown_vm
from glideinwms_pilot.vm_utils import daemonize


from glideinwms_pilot.user_data import retrieve_user_data
from glideinwms_pilot.user_data import extract_user_data

from glideinwms_pilot.config import Config

def retrieve_glidein_startup(config):
    try:
        url = "%s/glidein_startup.sh" % config.factory_url
        script = "%s/glidein_startup.sh" % config.home_dir
        script, _ = urllib.urlretrieve(url, script)
        chown(config.user_ids, script)
    except Exception, ex:
        raise PilotError("Error retrieving glidein_startup.sh: %s\n" % str(ex))

def handler_max_lifetime(signum, frame): # pylint: disable=W0613
    raise TimeoutError("Max lifetime has been exceeded, shutting down...")

def main():
    """
        Perform all the work necessary to launch a glideinWMS pilot which will
        attempt to connect back to the user pool.

        1)  daemonize this script.  This script is lauched via the *nix service
            mechanisms.  We don't want to make it wait forever and we don't
            want it to be attached to a console.
        2)  Get the user data that was passed to the AMI - Currently it is a
            tarball.
        3)  untar the tarball.  The tarball will contain a proxy, the
            glidein_startup.sh script and an ini file containing all the extra
            information needed
        4)  read the ini file
        5)  get the arguments for the glidein_startup.sh script
        6)  create an environment string to pass with final command
        7)  launch the glidein pilot with the appropriate environment
    """

    usage = "usage: %prog [options] [Site FQDN]"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--disable-daemon", action="store_true", 
                      dest="disable_daemon", default=False, 
                      help="Disable the daemon functionality and run in "\
                           "terminal")
    parser.add_option("-c", "--config-file", dest="config_file", 
                      default="/etc/glideinwms/glidein-pilot.ini", 
                      help="Specify a custom config file")

    (options, args) = parser.parse_args()


    if options.disable_daemon:
        print "disable daemon call"
    else:
        daemonize("/tmp/pilot.pid")

    # If config fails, we need to write error to console if available
    try:
        config = Config(options.config_file)
        config.setup()
        disable_shutdown = config.disable_shutdown

        try:
            # Change to the working directory
            cd(config.home_dir)

            # drop privileges to the glidein user
            config.log.log_info("Dropping privs to %s" % config.glidein_user)
            drop_privs(config.glidein_user)

            # get the user data - should be a tar file
            config.log.log_info("Retrieving user data")
            retrieve_user_data(config)

            # untar the user data
            config.log.log_info("Extracting user data")
            extract_user_data(config)

            # get the glidein_startup.sh script
            config.log.log_info("Retrieving glidein_startup.sh")
            retrieve_glidein_startup(config)
            chmod(0755, "%s/glidein_startup.sh" % config.home_dir)

            # configure pilot launch environment
            config.log.log_info("Configuring pilot environment...")
            config.log.log_info("    Username: %s" % config.glidein_user)

            pilot_env = config.get_grid_env()
            config.log.log_info("    Environment: %s" % str(pilot_env))

            pilot_args = config.pilot_args.split()
            pilot_args.insert(0, "glidein_startup.sh")
            config.log.log_info("Pilot arguments: %s" % str(pilot_args))

            # launch the pilot
            # The pilot will only be allowed to run for config.max_lifetime
            # seconds before being terminated
            glidein_startup = "%s/glidein_startup.sh" % config.home_dir
            config.log.log_info("Launching Pilot (%s)..." % glidein_startup)
            launch_pilot(glidein_startup, 
                         float(config.max_lifetime), config.log, 
                         pilot_args, pilot_env)

        except PilotError, ex:
            message = "A PilotError has occured: %s" % str(ex)
            config.log.log_err(message)
        except Exception, ex:
            config.log.log_err("Error launching pilot: %s" % str(ex))
    except ConfigError, ex:
        disable_shutdown = False

    if disable_shutdown:
        config.log.log_info("shutdown disabled")
    else:
        config.log.log_info("shutting down")
        shutdown_vm()

if __name__ == "__main__":
    main()
